
name: Dockerfile build and publish

on:
  workflow_dispatch:
    inputs: 
      show_message:
        description: "Log errors if tests fails"
        required: true
        default: "false"
        type: boolean

jobs:

  error_log:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Failing step if show_message is 'false'
      - name: Failing step if show_message is 'false'
        run: |
          echo "Error has occurd" > error.log
          exit 1
        if: ${{ github.event.inputs.show_message == 'false' }}
        
      # Upload error log if there is failure
      - name: Upload error log
        if: failure()
        uses: actions/upload-artifact@v3
        with: 
          name: error-log
          path: error.log

  unittest:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest

  build:

    runs-on: ubuntu-latest
    needs: unittest

    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          user: ${{ secrets.DOCKER_TIM_USERNAME}}
          password: ${{ secrets.DOCKER_TIM_PASSWORD}}

      # Step 3: Build the Docker image
      - name: Build Docker image
        run: docker build -t projectbounce . 

      # Step 4: Tag the Docker image
      - name: Tag Docker image
        run: docker tag projectbounce ${{ secrets.DOCKER_TIM_USERNAME }}/devops_project:latest

      - name: Tag Docker image version
        run: docker tag projectbounce ${{ secrets.DOCKER_TIM_USERNAME }}/devops_project:1.1

      # Step 5: Push the Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_TIM_USERNAME }}/devops_project:latest
      

